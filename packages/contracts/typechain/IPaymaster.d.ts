/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IPaymasterInterface extends ethers.utils.Interface {
  functions: {
    "getGasLimits()": FunctionFragment;
    "getHubAddr()": FunctionFragment;
    "getRelayHubDeposit()": FunctionFragment;
    "postRelayedCall(bytes,bool,uint256,tuple)": FunctionFragment;
    "preRelayedCall(tuple,bytes,bytes,uint256)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "versionPaymaster()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getGasLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHubAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayHubDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postRelayedCall",
    values: [
      BytesLike,
      boolean,
      BigNumberish,
      {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "preRelayedCall",
    values: [
      {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionPaymaster",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getGasLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHubAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRelayHubDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionPaymaster",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPaymaster extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPaymasterInterface;

  functions: {
    getGasLimits(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          acceptanceBudget: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        }
      ] & {
        limits: [BigNumber, BigNumber, BigNumber] & {
          acceptanceBudget: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        };
      }
    >;

    "getGasLimits()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          acceptanceBudget: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        }
      ] & {
        limits: [BigNumber, BigNumber, BigNumber] & {
          acceptanceBudget: BigNumber;
          preRelayedCallGasLimit: BigNumber;
          postRelayedCallGasLimit: BigNumber;
        };
      }
    >;

    getHubAddr(overrides?: CallOverrides): Promise<[string]>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<[string]>;

    getRelayHubDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "postRelayedCall(bytes,bool,uint256,tuple)"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    preRelayedCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "preRelayedCall(tuple,bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<[string]>;

    versionPaymaster(overrides?: CallOverrides): Promise<[string]>;

    "versionPaymaster()"(overrides?: CallOverrides): Promise<[string]>;
  };

  getGasLimits(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      acceptanceBudget: BigNumber;
      preRelayedCallGasLimit: BigNumber;
      postRelayedCallGasLimit: BigNumber;
    }
  >;

  "getGasLimits()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      acceptanceBudget: BigNumber;
      preRelayedCallGasLimit: BigNumber;
      postRelayedCallGasLimit: BigNumber;
    }
  >;

  getHubAddr(overrides?: CallOverrides): Promise<string>;

  "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

  getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

  postRelayedCall(
    context: BytesLike,
    success: boolean,
    gasUseWithoutPost: BigNumberish,
    relayData: {
      gasPrice: BigNumberish;
      pctRelayFee: BigNumberish;
      baseRelayFee: BigNumberish;
      relayWorker: string;
      paymaster: string;
      paymasterData: BytesLike;
      clientId: BigNumberish;
      forwarder: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "postRelayedCall(bytes,bool,uint256,tuple)"(
    context: BytesLike,
    success: boolean,
    gasUseWithoutPost: BigNumberish,
    relayData: {
      gasPrice: BigNumberish;
      pctRelayFee: BigNumberish;
      baseRelayFee: BigNumberish;
      relayWorker: string;
      paymaster: string;
      paymasterData: BytesLike;
      clientId: BigNumberish;
      forwarder: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  preRelayedCall(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    signature: BytesLike,
    approvalData: BytesLike,
    maxPossibleGas: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "preRelayedCall(tuple,bytes,bytes,uint256)"(
    relayRequest: {
      request: {
        from: string;
        to: string;
        value: BigNumberish;
        gas: BigNumberish;
        nonce: BigNumberish;
        data: BytesLike;
      };
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      };
    },
    signature: BytesLike,
    approvalData: BytesLike,
    maxPossibleGas: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

  versionPaymaster(overrides?: CallOverrides): Promise<string>;

  "versionPaymaster()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getGasLimits(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        acceptanceBudget: BigNumber;
        preRelayedCallGasLimit: BigNumber;
        postRelayedCallGasLimit: BigNumber;
      }
    >;

    "getGasLimits()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        acceptanceBudget: BigNumber;
        preRelayedCallGasLimit: BigNumber;
        postRelayedCallGasLimit: BigNumber;
      }
    >;

    getHubAddr(overrides?: CallOverrides): Promise<string>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<string>;

    getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "postRelayedCall(bytes,bool,uint256,tuple)"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    preRelayedCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { context: string; rejectOnRecipientRevert: boolean }
    >;

    "preRelayedCall(tuple,bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { context: string; rejectOnRecipientRevert: boolean }
    >;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

    versionPaymaster(overrides?: CallOverrides): Promise<string>;

    "versionPaymaster()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getGasLimits(overrides?: CallOverrides): Promise<BigNumber>;

    "getGasLimits()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHubAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRelayHubDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    "getRelayHubDeposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "postRelayedCall(bytes,bool,uint256,tuple)"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    preRelayedCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "preRelayedCall(tuple,bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<BigNumber>;

    versionPaymaster(overrides?: CallOverrides): Promise<BigNumber>;

    "versionPaymaster()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getGasLimits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGasLimits()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHubAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHubAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRelayHubDeposit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRelayHubDeposit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postRelayedCall(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "postRelayedCall(bytes,bool,uint256,tuple)"(
      context: BytesLike,
      success: boolean,
      gasUseWithoutPost: BigNumberish,
      relayData: {
        gasPrice: BigNumberish;
        pctRelayFee: BigNumberish;
        baseRelayFee: BigNumberish;
        relayWorker: string;
        paymaster: string;
        paymasterData: BytesLike;
        clientId: BigNumberish;
        forwarder: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    preRelayedCall(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "preRelayedCall(tuple,bytes,bytes,uint256)"(
      relayRequest: {
        request: {
          from: string;
          to: string;
          value: BigNumberish;
          gas: BigNumberish;
          nonce: BigNumberish;
          data: BytesLike;
        };
        relayData: {
          gasPrice: BigNumberish;
          pctRelayFee: BigNumberish;
          baseRelayFee: BigNumberish;
          relayWorker: string;
          paymaster: string;
          paymasterData: BytesLike;
          clientId: BigNumberish;
          forwarder: string;
        };
      },
      signature: BytesLike,
      approvalData: BytesLike,
      maxPossibleGas: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trustedForwarder()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionPaymaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "versionPaymaster()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
